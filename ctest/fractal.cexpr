(include "stdio.h")

(struct complex
  (double real)
  (double imag))

(define ((struct complex) complex-add ((struct complex) a) ((struct complex) b))
  (return (make-struct (struct complex)
                       (real (+ (struct-ref a real) (struct-ref b real)))
                       (imag (+ (struct-ref a imag) (struct-ref b imag))))))

(define ((struct complex) complex-multiply ((struct complex) a) ((struct complex) b))
  (return (make-struct (struct complex)
                       (real (- (* (struct-ref a real) (struct-ref b real))
                                (* (struct-ref a imag) (struct-ref b imag))))
                       (imag (+ (* (struct-ref a real) (struct-ref b imag))
                                (* (struct-ref a imag) (struct-ref b real)))))))

(define (double complex-modulus ((struct complex) a))
  (return (+ (* (struct-ref a real) (struct-ref a real))
             (* (struct-ref a imag) (struct-ref a imag)))))

(define (int julia ((struct complex) z) ((struct complex) c)  (int iterations))
  (while (> iterations 0)
      (set! z (complex-add (complex-multiply z z) c))
      (if (> (complex-modulus z) 2.0)
          (return 0)
          (set! iterations (- iterations 1))))
  (return 1))

(define (void main (int argc) ((* (* char)) argv))
  (declare (struct complex) z)
  (declare (struct complex) c)
  (set! c (make-struct (struct complex) (real -0.74) (imag 0.11)))
  (declare int x)
  (declare int y)
  (set! x 0)
  (set! y 0)
  (while (< y 20)
      (while (< x 60)
          (set! z (make-struct (struct complex) (real (/ (- x 30) 20.0)) (imag (/ (- y 10) 10.0))))
          (if (julia z c 1000)
              (printf "#")
              (printf "."))
          (set! x (+ x 1)))
      (puts "")
      (set! x 0)
      (set! y (+ y 1))))

