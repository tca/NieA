(define (cons x y)
 (lambda (selector)
  (selector x y)))
(define (car c)
 (c (lambda (x y) x)))
(define (cdr c)
 (c (lambda (x y) y)))

(define (begin a b) b)

(define (for-each f l)
  (if l
      (begin (f (car l))
             (for-each f (cdr l)))
      0))

(define (map f l)
  (if l
      (cons (f (car l))
            (map f (cdr l)))
      0))

(define (print-each list)
 (if list
     (begin (print (car list))
            (print-each (cdr list)))
     0))

(define (append a b)
  (if a
      (append (cdr a) (cons (car a) b))
      b))

(define (sierpinski n)
  (for-each
   (lambda (x) (begin (print-each x) (print "\n")))
   ((lambda (loop)
      (loop loop (cons (cons "*" 0) 0) (cons " " 0) n))
    (lambda (loop acc spaces n)
      (if n
          (loop
           loop
           (append
            (map (lambda (x) (append spaces (append x spaces))) acc)
            (map (lambda (x) (append x (append (cons " " 0) x))) acc))
           (append spaces spaces)
           (- n 1))
          acc)))))
      
     

(define (scm-main)
  (sierpinski 5))
