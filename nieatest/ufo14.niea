(define (cons x y)
 (lambda (selector)
  (selector x y)))
(define (car c)
 (c (lambda (x y) x)))
(define (cdr c)
 (c (lambda (x y) y)))

(define (words)
 (cons "mother" (cons "in" (cons "law" (cons "woman" (cons "hitler" (cons "debit" (cons "card" (cons "bad" (cons "credit" (cons "school" (cons "master" (cons "the" (cons "classroom" (cons "eleven" (cons "plus" (cons "two" (cons "twelve" (cons "plus" (cons "one" (cons "dormitory" (cons "dirty" (cons "room" (cons "punishment" (cons "nine" (cons "thumps" (cons "the" (cons "morse" (cons "code" (cons "here" (cons "come" (cons "dots" (cons "a" (cons "decimal" (cons "point" (cons "im" (cons "a" (cons "dot" (cons "in" (cons "place" (cons "astronomer" (cons "moon" (cons "starer" (cons "the" (cons "eyes" (cons "they" (cons "see" 0)))))))))))))))))))))))))))))))))))))))))))))))

(define (vector->list vec i)
 (if (= i (vector-length vec))
     0
     (cons (vector-ref vec i)
           (vector->list vec (+ i 1)))))

(define (null? l) (if l 0 1))

(define (map f l)
 (if l
     (cons (f (car l))
           (map f (cdr l)))
     0))

(define (append x y)
 (if (null? x)
     y
     (cons (car x) (append (cdr x) y))))

(define (concatenate lists)
  (if (null? lists)
      0
      (append (car lists) (concatenate (cdr lists)))))

(define (sift-by-loop thing to-process yes no cont)
 (if (null? to-process)
     (cont yes no)
     (if (comparator thing (car to-process))
         (sift-by-loop thing (cdr to-process) (cons (car to-process) yes) no cont)
         (sift-by-loop thing (cdr to-process) yes (cons (car to-process) no) cont))))

(define (sift-by thing things cont)
 (sift-by-loop thing things (cons thing 0) 0 cont))

(define (group-by things)
 (if (null? things)
     0
     (sift-by (car things) (cdr things)
       (lambda (ys zs)
         (cons (cons (car things) ys) (group-by zs))))))

(define (filter pred list)
  (if (null? list)
      0
      (if (pred (car list))
          (cons (car list) (filter pred (cdr list)))
          (filter pred (cdr list)))))

(define (comparator x y) (= (car x) (car y)))
(define (not-null? n) n)
(define (merge sequences)
  (map merge* (group-by (filter not-null? sequences))))
(define (merge* sequences)
  ;; invariant: all sequences have the same car
  (cons (car (car sequences))
    (cons (merge (map cdr sequences)) 0)))


(define (begin x y) y)

(define (print-each list)
 (if list
     (begin (print (car list))
            (print-each (cdr list)))
     0))


(define (scm-main)
 (go (merge (map (lambda (w) (vector->list w 0)) (words)))))

(define (go tree)
  (if tree
      (og (car tree))
      0))

(define (og trees)
 (begin (print (car trees))
        (go (car (cdr trees)))))
