(define (cons x y)
 (lambda (selector)
  (selector x y)))
(define (car c)
 (c (lambda (x y) x)))
(define (cdr c)
 (c (lambda (x y) y)))

(define (begin a b) b)

(define (for-each f l)
  (if l
      (begin (f (car l))
             (for-each f (cdr l)))
      0))

(define (for-each-between f comma list)
  (if list
      (if (cdr list)
          (begin
            (f (car list))
            (begin (comma 1)
                   (for-each-between f comma (cdr list))))
          (f (car list)))
      0 ))

(define (test)
  (lambda (i)
    (for-each (lambda (i)
                (begin (print "DOCHY! ")
                       (print i)))
              (cons i (cons (+ i 1) (cons (+ i 2) 0))))))

(define (test-2)
  (lambda (i)
    (for-each-between
     (lambda (i)
       (begin (print "HAPPY! ")
              (print i)))
     (lambda (n) (print "LUCKY! "))
     (cons i (cons (+ i 1) (cons (+ i 2) 0))))))

(define (scm-main)
  (begin
    (for-each (test-2) (cons 67676767 (cons 252525 (cons 484848 0))))
    (for-each (test) (cons 67676767 (cons 252525 (cons 484848 0))))))
