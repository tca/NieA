(include "scm_fptr.h")
;;typedef struct scm* (*scm_fptr)();

(struct scm-vector
  (int len)
  (int ref)
  ((* (struct scm)) elt))

(union scm-value
  ;; Immediate values
  (int i) ;; t=0
  ((type scm-fptr) f) ;; t=1

  ;; Allocated values
  ((* (struct scm-vector)) v) ;; t=2, t=3 vector and closure
  )

(struct scm
  (int tag)
  ((union scm-value) val))

(define (void scm-memory-trace)
 (fprintf stderr "%d %d\n" scm-time scm-memory-used)
 (return))
(define (void scm-free (int size) ((* void) p))
 (set! scm-time (+ scm-time 1))
 (set! scm-memory-used (- scm-memory-used size))
 (scm-memory-trace)
 (free p))
(define ((* void) scm-malloc (int size))
 (set! scm-time (+ scm-time 1))
 (set! scm-memory-used (+ scm-memory-used size))
 (scm-memory-trace)
 (return (malloc size)))

(define (void refcount-dec ((struct scm) s))
  (declare int i)
  (declare (* (struct scm-vector)) v)
  (if (\|\| (= 2 (struct-ref s tag)) ;; vector
            (= 3 (struct-ref s tag))) ;; closure
      (begin (set! v (struct-ref (struct-ref s val) v))
             (set! (struct->ref v ref) (- (struct->ref v ref) 1))
             (if (= 0 (struct->ref v ref))
                 (begin (set! i 0)
                        (while (< i (struct->ref v len))
                               (set! i (+ i 1))
                               (refcount-dec (array-ref (struct->ref v elt) i))
                               )
                        (scm-free (* (sizeof (struct scm)) (struct->ref v len)) (struct->ref v elt))
                        ;;; CORRUPT
                        (set! (struct->ref v elt) NULL)
                        (set! (struct->ref v len) 99999))
                 (begin)))
      (begin)))

(define (void refcount-inc ((struct scm) s))
  (declare int i)
  (declare (* (struct scm-vector)) v)
  (if (\|\| (= 2 (struct-ref s tag)) ;; vector
            (= 3 (struct-ref s tag))) ;; closure
      (begin (set! v (struct-ref (struct-ref s val) v))
             (set! (struct->ref v ref) (+ (struct->ref v ref) 1)))
      (begin)))

(define (void refcount-inc* ((struct scm) s) (int n))
  (declare int i)
  (declare (* (struct scm-vector)) v)
  (if (\|\| (= 2 (struct-ref s tag)) ;; vector
            (= 3 (struct-ref s tag))) ;; closure
      (begin (set! v (struct-ref (struct-ref s val) v))
             (set! (struct->ref v ref) (+ (struct->ref v ref) n)))
      (begin)))

(define ((struct scm) allocate-vector (int len))
  (declare (* (struct scm-vector)) v)
  (set! v (scm-malloc (sizeof (struct scm-vector)))) ;; This never gets free'd FIXME
  (set! (struct->ref v len) len)
  (set! (struct->ref v ref) 1)
  (set! (struct->ref v elt) (scm-malloc (* (sizeof (struct scm)) len)))
  (return (make-struct (struct scm) (tag 2) (val.v v))))

(define ((struct scm) make-closure ((struct scm) c))
  (set! (struct-ref c tag) 3)
  (return c))

(define ((struct scm) scm-print ((struct scm) a))
  (declare int i)
  (declare (* (struct scm)) elt)
  (if (= (struct-ref a tag) 0)
      (printf "%d\n" (struct-ref a val.i))
      (if (\|\| (= (struct-ref a tag) 2)
              (= (struct-ref a tag) 3))
          (begin (set! elt (struct->ref (struct-ref a val.v) elt))
                 (set! i 0)
                 (while (< i (struct->ref (struct-ref a val.v) len))
                        (if (= (struct-ref (array-ref elt i) tag) 0)
                            (putchar (struct-ref (array-ref elt i) val.i))
                            (putchar #\?))
                        (set! i (+ i 1))))
          (putchar #\?)))
  (refcount-dec a))

(define (int scm-extract-truth ((struct scm) x))
  (return (\|\| (! (= 0 (struct-ref x tag)))
                (! (= 0 (struct-ref x val.i))))))

(define ((struct scm) scm-vector-ref ((struct scm) vec) ((struct scm) idx))
  (assert (= (struct-ref vec tag) 2))
  (assert (= (struct-ref idx tag) 0))
  (declare (* (struct scm)) v)
  (declare int i)
  (declare (struct scm) ret)
  (set! v (struct->ref (struct-ref (struct-ref vec val) v) elt))
  (set! i (struct-ref (struct-ref idx val) i))
  (assert (< i (struct->ref (struct-ref (struct-ref vec val) v) len)))
  (set! ret (array-ref v i))
  (refcount-dec vec)
  (return ret))

(define ((struct scm) scm-vector-length ((struct scm) vec))
  (assert (= (struct-ref vec tag) 2))
  (declare (* (struct scm)) v)
  (declare int i)
  (declare (struct scm) ret)
  (set! i (struct->ref (struct-ref (struct-ref vec val) v) len))
  (set! ret (make-struct (struct scm) (tag 0) (val.i i)))
  (refcount-dec vec)
  (return ret))

(define ((struct scm) scm-make-vector ((struct scm) len) ((struct scm) gen))
  (assert (= (struct-ref len tag) 0))
  (assert (= (struct-ref gen tag) 3)) ;; closure
  (declare (struct scm) v)
  (declare int j)
  (declare int n)
  (declare (type scm-fptr) fn)
  (declare (* (struct scm)) elt)
  (set! fn (struct-ref (struct-ref (array-ref (struct->ref (struct-ref (struct-ref gen val) v) elt) 0) val) f))
  (set! n (struct-ref (struct-ref len val) i))
  (set! v (allocate-vector n))
  (set! elt (struct->ref (struct-ref (struct-ref v val) v) elt))
  (set! j 0)
  (while (< j n)
         (set! (array-ref elt j) (fn gen (make-struct (struct scm) (tag 0) (val.i j))))
         (set! j (+ j 1)))
  (return v))

(define ((struct scm) scm-boole ((struct scm) b) ((struct scm) t) ((struct scm) e))
  (assert (= (struct-ref t tag) 3))
  (assert (= (struct-ref e tag) 3))
  (declare (struct scm) branch)
  (declare (struct scm) ret)
  (declare (type scm-fptr) fn)
  (if (&& (= (struct-ref b tag) 0)
          (= 0 (struct-ref (struct-ref b val) i)))
      (set! branch e)
      (set! branch t))
  (set! fn (struct-ref (struct-ref (array-ref (struct->ref (struct-ref (struct-ref branch val) v) elt) 0) val) f))
  (set! ret (fn branch (make-struct (struct scm) (tag 0) (val.i 0))))
  #;(refcount-dec b) (refcount-dec t) (refcount-dec e)
  (return ret)) 

(define ((struct scm) scm-plus ((struct scm) a) ((struct scm) b))
  (assert (= (struct-ref a tag) 0))
  (assert (= (struct-ref b tag) 0))
  (return (make-struct (struct scm)
            (tag 0)
            (val.i (+ (struct-ref a val.i) (struct-ref b val.i))))))

(define ((struct scm) scm-minus ((struct scm) a) ((struct scm) b))
  (assert (= (struct-ref a tag) 0))
  (assert (= (struct-ref b tag) 0))
  (return (make-struct (struct scm)
            (tag 0)
            (val.i (- (struct-ref a val.i) (struct-ref b val.i))))))

(define ((struct scm) scm-multiply ((struct scm) a) ((struct scm) b))
  (assert (= (struct-ref a tag) 0))
  (assert (= (struct-ref b tag) 0))
  (return (make-struct (struct scm)
            (tag 0)
            (val.i (* (struct-ref a val.i) (struct-ref b val.i))))))

(define ((struct scm) scm-divide ((struct scm) a) ((struct scm) b))
  (assert (= (struct-ref a tag) 0))
  (assert (= (struct-ref b tag) 0))
  (return (make-struct (struct scm)
            (tag 0)
            (val.i (/ (struct-ref a val.i) (struct-ref b val.i))))))

(define ((struct scm) scm-eq ((struct scm) a) ((struct scm) b))
  (if (&& (= (struct-ref a tag) 0) (= (struct-ref b tag) 0))
      (return (make-struct (struct scm)
                (tag 0)
                (val.i (= (struct-ref a val.i) (struct-ref b val.i)))))
      (return (make-struct (struct scm) (tag 0) (val.i 0)))))

(define ((struct scm) scm-gt ((struct scm) a) ((struct scm) b))
  (if (&& (= (struct-ref a tag) 0) (= (struct-ref b tag) 0))
      (return (make-struct (struct scm)
                (tag 0)
                (val.i (> (struct-ref a val.i) (struct-ref b val.i)))))
      (return (make-struct (struct scm) (tag 0) (val.i 0)))))

(define ((struct scm) scm-lt ((struct scm) a) ((struct scm) b))
  (if (&& (= (struct-ref a tag) 0) (= (struct-ref b tag) 0))
      (return (make-struct (struct scm)
                (tag 0)
                (val.i (< (struct-ref a val.i) (struct-ref b val.i)))))
      (return (make-struct (struct scm) (tag 0) (val.i 0)))))

(define ((struct scm) scm-gteq ((struct scm) a) ((struct scm) b))
  (if (&& (= (struct-ref a tag) 0) (= (struct-ref b tag) 0))
      (return (make-struct (struct scm)
                (tag 0)
                (val.i (>= (struct-ref a val.i) (struct-ref b val.i)))))
      (return (make-struct (struct scm) (tag 0) (val.i 0)))))

(define ((struct scm) scm-lteq ((struct scm) a) ((struct scm) b))
  (if (&& (= (struct-ref a tag) 0) (= (struct-ref b tag) 0))
      (return (make-struct (struct scm)
                (tag 0)
                (val.i (<= (struct-ref a val.i) (struct-ref b val.i)))))
      (return (make-struct (struct scm) (tag 0) (val.i 0)))))
